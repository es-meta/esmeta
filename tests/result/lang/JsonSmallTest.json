{
  "lang.Type(ty : ty.Ty = Ast) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[Arguments] | Enum[~empty~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentExpression | Expression | Initializer]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentExpression | Expression]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[CallExpression | MemberExpression | OptionalChain]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[CaseClause]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassElement] | Enum[~empty~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[ExpressionBody | FunctionBody]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[Expression] | Enum[~empty~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[Expression]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[GroupName]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[IdentifierName]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[MemberExpression | NewExpression]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[NoSubstitutionTemplate | TemplateHead | TemplateMiddle | TemplateTail]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[RegularExpressionLiteral]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[ScriptBody]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[Script]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Ast[Statement]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = BigInt | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = BigInt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Boolean | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Boolean) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Clo | Ast[FunctionBody]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Clo) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Completion) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = ESValue | Enum[~empty~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = ESValue | Enum[~uninitialized~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = ESValue | Record[ReferenceRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = ESValue) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~ascending~, ~descending~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~assignment~, ~lexical-binding~, ~var-binding~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~async-generator~, ~async~, ~generator~, ~normal~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~async-iterate~, ~enumerate~, ~iterate~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~async~, ~non-generator~, ~sync~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~async~, ~sync~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~backward~, ~forward~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~constructor-method~, ~empty~, ~non-constructor-method~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~empty~] | Int[0+]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~empty~] | String) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~end~, ~start+end~, ~start~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~end~, ~start~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~enumerate~, ~iterate~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~fixed-length~, ~preserve-resizability~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~frozen~, ~sealed~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~init~, ~seq-cst~, ~unordered~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~invalid~, ~simple~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~key+value~, ~key~, ~value~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~key+value~, ~value~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~lexical-this~, ~non-lexical-this~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~number~, ~string~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~property~, ~zero~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~read-through-holes~, ~skip-holes~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~seq-cst~, ~unordered~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~string~, ~symbol~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Enum[~unused~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = False) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = GrammarSymbol) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Int) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Int[+]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Int[0+] | +INF) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Int[0+]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Int[0, 1]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Ast]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[BigInt]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[ESValue]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[CyclicModuleRecord]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[ExportEntryRecord]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[ImportEntryRecord]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[MatchRecord] | Undefined]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[PromiseReactionRecord]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[SourceTextModuleRecord]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[Symbol] | String]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[TimeZoneIdentifierRecord]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[Record[WaiterRecord]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[String | Undefined]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = List[String]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[BigInt] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Boolean | Undefined] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Boolean] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Boolean] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Boolean]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue | Enum[~done~]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue | Enum[~empty~]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue | Record[ReferenceRecord]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Enum[~empty~] | Int[0+]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Enum[~unused~]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Enum[~unused~]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Enum[~unused~]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[False]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Int | INF] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Int[0+]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Int] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Int] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[List[ESValue]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[List[ESValue]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[List[Record[Symbol] | String]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[List[Record[Symbol] | String]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[List[Record[Symbol] | String]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Null]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Number | BigInt | String] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Number | BigInt | String] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Number | BigInt] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[NumberInt] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Number] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Number] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ArrayBuffer]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Array] | Null] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Array]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ClassFieldDefinitionRecord | ClassStaticBlockDefinitionRecord | PrivateElement] | Enum[~unused~]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ClassFieldDefinitionRecord]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Constructor]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[DataBlock]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ECMAScriptFunctionObject]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[FunctionObject] | Undefined] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[FunctionObject]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[FunctionObject]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Generator]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[IteratorRecord]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[IteratorRecord]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ModuleRecord]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object] | False] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object] | Null] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object] | Null]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object] | Undefined | Null] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object]]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PrivateElement] | Enum[~unused~]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PromiseCapabilityRecord]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PropertyDescriptor] | Undefined] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PropertyDescriptor] | Undefined]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PropertyDescriptor]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ProxyExoticObject]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[RealmRecord]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ReferenceRecord]] | Abrupt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ReferenceRecord]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[SharedArrayBuffer]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[SharedDataBlock]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[SuperReferenceRecord]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Symbol] | String] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Symbol]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[TypedArrayWithBufferWitnessRecord]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[TypedArray]] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[String | Undefined] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[String] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[True]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Undefined] | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Normal[Undefined]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Number | BigInt | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Number | BigInt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Number | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Number) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = NumberInt | NaN) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = NumberInt) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ArgumentsExoticObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ArrayBuffer | SharedArrayBuffer]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ArrayBuffer]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Array]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[AsyncGenerator]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[BuiltinFunctionObject | ECMAScriptFunctionObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[BuiltinFunctionObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[CharSet]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ClassFieldDefinitionRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ClassStaticBlockDefinitionRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Constructor] | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Constructor]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[CyclicModuleRecord | RealmRecord | ScriptRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[CyclicModuleRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[DataBlock | SharedDataBlock]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[DataView | TypedArray]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[DataViewWithBufferWitnessRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[DataView]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[DeclarativeEnvironmentRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ECMAScriptFunctionObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[EnvironmentRecord] | Null) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[EnvironmentRecord] | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[EnvironmentRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ExecutionContext]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[FinalizationRegistry]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[FunctionEnvironmentRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[FunctionObject] | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[FunctionObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Generator]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[GlobalEnvironmentRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[GraphLoadingStateRecord | PromiseCapabilityRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[GraphLoadingStateRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[IteratorRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Iterator]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[JSONSerializationRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[JobCallbackRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[MatchRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[MatchResult]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[MatchState]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[MatcherContinuation]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Matcher]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleEnvironmentRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleNamespaceExoticObject] | Enum[~empty~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleNamespaceExoticObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleRecord | ScriptRecord] | Null) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Object | Symbol]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ObjectEnvironmentRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Object] | Null) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Object] | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Object]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[OrdinaryObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateElement] | Enum[~empty~]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateElement]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateEnvironmentRecord] | Null) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateEnvironmentRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateName | Symbol] | String) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateName]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PromiseCapabilityRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PromiseReactionRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Promise]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PropertyDescriptor] | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[PropertyDescriptor]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ProxyExoticObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[RealmRecord] | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[RealmRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ReferenceRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[RegExpRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[RegExp]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ResolvedBindingRecord] | Enum[~ambiguous~] | Null) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[ScriptRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[SharedDataBlock]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[StringExoticObject]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Symbol] | String) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[Symbol]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[TypedArrayWithBufferWitnessRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[TypedArray]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[WaiterListRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[WaiterRecord]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Record[WeakRef]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Return | Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Return) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = String | Null) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = String | Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = String) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Throw) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = True) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Undefined) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"*+0*<sub>𝔽</sub> or *1*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"*365*<sub>𝔽</sub> or *366*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"ECMAScript source text\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"`&`, `^`, or `|`\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"`**`, `*`, `/`, `%`, `+`, `-`, `<<`, `>>`, `>>>`, `&`, `^`, or `|`\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a For-In Iterator\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of Records with fields [[Key]] (an ECMAScript language value) and [[Elements]] (a List of ECMAScript language values)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of Records with fields [[Module]] (a Module Record) and [[ExportName]] (a String)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of byte values\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of characters\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of code points\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of either WriteSharedMemory or ReadModifyWriteSharedMemory events\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of names of ECMAScript Language Types\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of names of internal slots\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of |ClassElement| Parse Nodes\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of |GroupSpecifier| Parse Nodes\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Number, but not *NaN*\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Parse Node or a non-empty List of *SyntaxError* objects\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a PromiseCapability Record for an intrinsic %Promise%\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a ReadSharedMemory or ReadModifyWriteSharedMemory event\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[CharSet]] (a CharSet) and [[Invert]] (a Boolean)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[CodePoint]] (a code point), [[CodeUnitCount]] (a positive integer), and [[IsUnpairedSurrogate]] (a Boolean)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Job]] (a Job Abstract Closure) and [[Realm]] (a Realm Record or *null*)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Job]] (a Job Abstract Closure) and [[Realm]] (a Realm Record)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Min]] (a non-negative integer) and [[Max]] (a non-negative integer or +∞)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Min]] (a non-negative integer), [[Max]] (a non-negative integer or +∞), and [[Greedy]] (a Boolean)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Resolve]] (a function object) and [[Reject]] (a function object)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Script Record or a non-empty List of *SyntaxError* objects\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Set of events\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Source Text Module Record or a non-empty List of *SyntaxError* objects\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a TypedArray element type\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Unicode code point\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Unicode property name\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Unicode property value\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a candidate execution\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a character\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a code point\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a code unit\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a finite time value\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a mathematical value\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a non-negative integer that is evenly divisible by 4\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a nonterminal in one of the ECMAScript grammars\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a read-modify-write modification function\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a sequence of Unicode code points\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a sequence of characters\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a time value\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Abstract Closure that takes a List of characters and a non-negative integer and returns a MatchResult\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Abstract Closure with two parameters\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Abstract Closure, a set of algorithm steps, or some other definition of a function's behaviour provided in this specification\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an ECMAScript language value, but not *undefined* or *null*\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an ECMAScript language value, but not a Number\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an ECMAScript language value, but not a TypedArray\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Object that conforms to the <i>IteratorResult</i> interface\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Object that has a [[StringData]] internal slot\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Object, but not a TypedArray or an ArrayBuffer\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an agent signifier\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an instance of a concrete subclass of Module Record\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 0 to 23\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 0 to 59\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 0 to 999\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 1 to 12\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 1 to 31\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 2 to 36\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *11*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *23*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *365*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *59*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *6*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *999*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *1*<sub>𝔽</sub> to *31*<sub>𝔽</sub>\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the interval from *+0*<sub>𝔽</sub> (inclusive) to msPerDay (exclusive)\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"any value except a Completion Record\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"anything\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a non-negative integer or a non-empty List of *SyntaxError* objects\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing a List of Records with fields [[Key]] (an ECMAScript language value) and [[Elements]] (a List of ECMAScript language values), or a throw completion\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing a Record with fields [[Index]] (an integral Number) and [[Value]] (an ECMAScript language value) or a throw completion\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing a Record with fields [[Key]] (a property key) and [[Closure]] (an ECMAScript function object) or an abrupt completion\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing either an Object, *\\\"not-equal\\\"*, *\\\"timed-out\\\"*, or *\\\"ok\\\"*, or a throw completion\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing one of ~suspended-start~, ~suspended-yield~, or ~completed~, or a throw completion\"]) ⊑ langTypeAfterDecoding" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"source text\"]) ⊑ langTypeAfterDecoding" : true
}
