{
  "lang.Type(ty : ty.Ty = Ast).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AdditiveExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Alternative]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ArgumentList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Arguments] | Enum[~empty~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Arguments]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ArrayBindingPattern]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ArrayLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ArrowFunction]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ArrowParameters]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsciiLetter]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Assertion]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentElementList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentElisionElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentExpression | Expression | Initializer]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentExpression | Expression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentOperator]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentPropertyList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentProperty]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentRestElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AssignmentRestProperty]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncArrowBindingIdentifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncArrowFunction]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncConciseBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncFunctionBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncFunctionDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncFunctionExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncGeneratorBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncGeneratorDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncGeneratorExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncGeneratorMethod]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AsyncMethod]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Atom]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[AwaitExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BigIntLiteralSuffix]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingElementList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingElisionElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingIdentifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingPattern]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingPropertyList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingProperty]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingRestElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BindingRestProperty]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BitwiseANDExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BitwiseORExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BitwiseXORExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BlockStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Block]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BooleanLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[BreakStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CallExpression | MemberExpression | OptionalChain]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CallExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CaseBlock]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CaseClause]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CaseClauses]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CatchParameter]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Catch]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CharacterClassEscape]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CharacterClass]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CharacterEscape]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassAtomNoDash]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassAtom]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassContents]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassElementList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassElementName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassElement] | Enum[~empty~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassHeritage]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassIntersection]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassSetCharacter]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassSetOperand]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassSetRange]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassSetReservedPunctuator]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassStaticBlockBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassStaticBlockStatementList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassStaticBlock]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassStringDisjunctionContents]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassStringDisjunction]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassString]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassSubtraction]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassTail]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ClassUnion]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CoalesceExpressionHead]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CodePoint]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ComputedPropertyName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ConciseBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ContinueStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ControlEscape]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CoverCallExpressionAndAsyncArrowHead]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[CoverParenthesizedExpressionAndArrowParameterList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[DebuggerStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[DecimalDigits]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[DecimalEscape]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[DecimalLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Declaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[DefaultClause]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[DestructuringAssignmentTarget]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Disjunction]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[DoWhileStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ElementList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Elision]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[EmptyStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[EqualityExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExponentPart]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExponentiationExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExportDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExportFromClause]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExportSpecifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExportsList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExpressionBody | FunctionBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExpressionBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ExpressionStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Expression] | Enum[~empty~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Expression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FieldDefinition]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Finally]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ForBinding]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ForDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ForInOfStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ForStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FormalParameterList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FormalParameter]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FormalParameters]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FromClause]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FunctionBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FunctionDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FunctionExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FunctionRestParameter]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[FunctionStatementList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[GeneratorBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[GeneratorDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[GeneratorExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[GeneratorMethod]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[GroupName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[GroupSpecifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Hex4Digits]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[HexEscapeSequence]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[HexLeadSurrogate]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[HexTrailSurrogate]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[HoistableDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IdentifierName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IdentifierPartChar]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IdentifierPart]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IdentifierReference]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IdentifierStartChar]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IdentifierStart]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Identifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IdentityEscape]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IfStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ImportCall]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ImportClause]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ImportDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ImportSpecifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ImportedBinding]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ImportedDefaultBinding]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ImportsList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Initializer]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[IterationStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LabelIdentifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LabelledItem]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LeftHandSideExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LegacyOctalIntegerLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LetOrConst]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LexicalBinding]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LexicalDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LiteralPropertyName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Literal]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LogicalANDExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LogicalORExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[LoneUnicodePropertyNameOrValue]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[MemberExpression | NewExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[MemberExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[MetaProperty]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[MethodDefinition]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ModuleExportName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ModuleItemList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ModuleItem]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ModuleSpecifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[MultiplicativeExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[MultiplicativeOperator]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NameSpaceImport]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NamedExports]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NamedImports]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NestedClass]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NewExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NoSubstitutionTemplate | TemplateHead | TemplateMiddle | TemplateTail]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NoSubstitutionTemplate]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NonDecimalIntegerLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NonEmptyClassString]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NonZeroDigit]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NonemptyClassRangesNoDash]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NonemptyClassRanges]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NullLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NumericLiteralSeparator]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[NumericLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ObjectBindingPattern]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ObjectLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[OptionalChain]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[OptionalExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[PatternCharacter]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[PrimaryExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[PrivateIdentifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[PropertyDefinitionList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[PropertyDefinition]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[PropertyName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[PropertySetParameterList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[QuantifierPrefix]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Quantifier]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[RegExpIdentifierName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[RegExpIdentifierPart]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[RegExpIdentifierStart]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[RegExpUnicodeEscapeSequence]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[RegularExpressionBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[RegularExpressionFlags]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[RegularExpressionLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[RelationalExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ReturnStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ScriptBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Script]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ShiftExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ShortCircuitExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[SingleNameBinding]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[SourceCharacter]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[SpreadElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[StatementListItem]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[StatementList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Statement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[StrNumericLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[StrUnsignedDecimalLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[StrWhiteSpace]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[StringLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[SubstitutionTemplate]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[SuperCall]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[SuperProperty]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[SwitchStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[TemplateHead]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[TemplateLiteral]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[TemplateMiddleList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[TemplateMiddle]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[TemplateSpans]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[TemplateTail]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[Term]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[ThrowStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[TryStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[UnaryExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[UnicodeLeadSurrogate]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[UnicodePropertyName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[UnicodePropertyValueExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[UnicodePropertyValue]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[UnicodeTrailSurrogate]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[UniqueFormalParameters]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[UpdateExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[VariableDeclarationList]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[VariableDeclaration]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[VariableStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[WhileStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[WithStatement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Ast[YieldExpression]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = BigInt | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = BigInt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Boolean | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Boolean).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Clo | Ast[FunctionBody]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Clo).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Completion).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = ESValue | Enum[~empty~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = ESValue | Enum[~uninitialized~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = ESValue | Record[ReferenceRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = ESValue).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~ascending~, ~descending~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~assignment~, ~lexical-binding~, ~var-binding~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~async-generator~, ~async~, ~generator~, ~normal~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~async-iterate~, ~enumerate~, ~iterate~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~async~, ~non-generator~, ~sync~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~async~, ~sync~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~backward~, ~forward~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~constructor-method~, ~empty~, ~non-constructor-method~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~empty~] | Int[0+]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~empty~] | String).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~end~, ~start+end~, ~start~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~end~, ~start~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~enumerate~, ~iterate~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~fixed-length~, ~preserve-resizability~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~frozen~, ~sealed~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~init~, ~seq-cst~, ~unordered~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~invalid~, ~simple~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~key+value~, ~key~, ~value~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~key+value~, ~value~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~lexical-this~, ~non-lexical-this~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~number~, ~string~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~property~, ~zero~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~read-through-holes~, ~skip-holes~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~seq-cst~, ~unordered~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~string~, ~symbol~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Enum[~unused~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = False).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = GrammarSymbol).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Int).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Int[+]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Int[0+] | +INF).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Int[0+]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Int[0, 1]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Ast]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[BigInt]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[ESValue]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[CyclicModuleRecord]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[ExportEntryRecord]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[ImportEntryRecord]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[MatchRecord] | Undefined]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[PromiseReactionRecord]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[SourceTextModuleRecord]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[Symbol] | String]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[TimeZoneIdentifierRecord]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[Record[WaiterRecord]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[String | Undefined]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = List[String]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[BigInt] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Boolean | Undefined] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Boolean] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Boolean] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Boolean]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue | Enum[~done~]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue | Enum[~empty~]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue | Record[ReferenceRecord]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[ESValue] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Enum[~empty~] | Int[0+]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Enum[~unused~]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Enum[~unused~]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Enum[~unused~]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[False]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Int | INF] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Int[0+]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Int] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Int] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[List[ESValue]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[List[ESValue]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[List[Record[Symbol] | String]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[List[Record[Symbol] | String]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[List[Record[Symbol] | String]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Null]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Number | BigInt | String] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Number | BigInt | String] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Number | BigInt] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[NumberInt] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Number] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Number] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ArrayBuffer]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Array] | Null] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Array]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ClassFieldDefinitionRecord | ClassStaticBlockDefinitionRecord | PrivateElement] | Enum[~unused~]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ClassFieldDefinitionRecord]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Constructor]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[DataBlock]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ECMAScriptFunctionObject]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[FunctionObject] | Undefined] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[FunctionObject]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[FunctionObject]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Generator]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[IteratorRecord]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[IteratorRecord]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ModuleRecord]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object] | False] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object] | Null] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object] | Null]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object] | Undefined | Null] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Object]]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PrivateElement] | Enum[~unused~]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PromiseCapabilityRecord]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PropertyDescriptor] | Undefined] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PropertyDescriptor] | Undefined]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[PropertyDescriptor]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ProxyExoticObject]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[RealmRecord]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ReferenceRecord]] | Abrupt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[ReferenceRecord]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[SharedArrayBuffer]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[SharedDataBlock]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[SuperReferenceRecord]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Symbol] | String] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[Symbol]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[TypedArrayWithBufferWitnessRecord]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Record[TypedArray]] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[String | Undefined] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[String] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[True]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Undefined] | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Normal[Undefined]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Number | BigInt | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Number | BigInt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Number | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Number).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = NumberInt | NaN).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = NumberInt).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ArgumentsExoticObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ArrayBuffer | SharedArrayBuffer]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ArrayBuffer]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Array]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[AsyncGenerator]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[BoundFunctionExoticObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[BuiltinFunctionObject | ECMAScriptFunctionObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[BuiltinFunctionObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[CharSet]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ClassFieldDefinitionRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ClassStaticBlockDefinitionRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Constructor] | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Constructor]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[CyclicModuleRecord | RealmRecord | ScriptRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[CyclicModuleRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[DataBlock | SharedDataBlock]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[DataView | TypedArray]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[DataViewWithBufferWitnessRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[DataView]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[DeclarativeEnvironmentRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ECMAScriptFunctionObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[EnvironmentRecord] | Null).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[EnvironmentRecord] | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[EnvironmentRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ExecutionContext]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[FinalizationRegistry]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[FunctionEnvironmentRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[FunctionObject] | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[FunctionObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Generator]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[GlobalEnvironmentRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[GraphLoadingStateRecord | PromiseCapabilityRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[GraphLoadingStateRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ImmutablePrototypeExoticObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[IteratorRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Iterator]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[JSONSerializationRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[JobCallbackRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[MatchRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[MatchResult]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[MatchState]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[MatcherContinuation]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Matcher]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleEnvironmentRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleNamespaceExoticObject] | Enum[~empty~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleNamespaceExoticObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleRecord | ScriptRecord] | Null).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ModuleRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Object | Symbol]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ObjectEnvironmentRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Object] | Null).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Object] | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Object]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[OrdinaryObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateElement] | Enum[~empty~]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateElement]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateEnvironmentRecord] | Null).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateEnvironmentRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateName | Symbol] | String).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PrivateName]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PromiseCapabilityRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PromiseReactionRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Promise]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PropertyDescriptor] | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[PropertyDescriptor]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ProxyExoticObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[RealmRecord] | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[RealmRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ReferenceRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[RegExpRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[RegExp]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ResolvedBindingRecord] | Enum[~ambiguous~] | Null).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[ScriptRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[SharedDataBlock]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[StringExoticObject]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Symbol] | String).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[Symbol]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[TypedArrayWithBufferWitnessRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[TypedArray]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[WaiterListRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[WaiterRecord]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Record[WeakRef]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Return | Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Return).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = String | Null).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = String | Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = String).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Throw).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = True).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Undefined).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"*+0*<sub>𝔽</sub> or *1*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"*365*<sub>𝔽</sub> or *366*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"ECMAScript source text\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"`&`, `^`, or `|`\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"`**`, `*`, `/`, `%`, `+`, `-`, `<<`, `>>`, `>>>`, `&`, `^`, or `|`\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a For-In Iterator\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of Records with fields [[Key]] (an ECMAScript language value) and [[Elements]] (a List of ECMAScript language values)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of Records with fields [[Module]] (a Module Record) and [[ExportName]] (a String)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of byte values\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of characters\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of code points\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of either WriteSharedMemory or ReadModifyWriteSharedMemory events\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of names of ECMAScript Language Types\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of names of internal slots\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of |ClassElement| Parse Nodes\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a List of |GroupSpecifier| Parse Nodes\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Number, but not *NaN*\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Parse Node or a non-empty List of *SyntaxError* objects\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a PromiseCapability Record for an intrinsic %Promise%\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a ReadSharedMemory or ReadModifyWriteSharedMemory event\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[CharSet]] (a CharSet) and [[Invert]] (a Boolean)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[CodePoint]] (a code point), [[CodeUnitCount]] (a positive integer), and [[IsUnpairedSurrogate]] (a Boolean)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Job]] (a Job Abstract Closure) and [[Realm]] (a Realm Record or *null*)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Job]] (a Job Abstract Closure) and [[Realm]] (a Realm Record)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Min]] (a non-negative integer) and [[Max]] (a non-negative integer or +∞)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Min]] (a non-negative integer), [[Max]] (a non-negative integer or +∞), and [[Greedy]] (a Boolean)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Record with fields [[Resolve]] (a function object) and [[Reject]] (a function object)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Script Record or a non-empty List of *SyntaxError* objects\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Set of events\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Source Text Module Record or a non-empty List of *SyntaxError* objects\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a TypedArray element type\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Unicode code point\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Unicode property name\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a Unicode property value\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a candidate execution\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a character\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a code point\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a code unit\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a finite time value\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a mathematical value\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a non-negative integer that is evenly divisible by 4\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a nonterminal in one of the ECMAScript grammars\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a read-modify-write modification function\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a sequence of Unicode code points\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a sequence of characters\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"a time value\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Abstract Closure that takes a List of characters and a non-negative integer and returns a MatchResult\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Abstract Closure with two parameters\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Abstract Closure, a set of algorithm steps, or some other definition of a function's behaviour provided in this specification\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an ECMAScript language value, but not *undefined* or *null*\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an ECMAScript language value, but not a Number\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an ECMAScript language value, but not a TypedArray\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Object that conforms to the <i>IteratorResult</i> interface\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Object that has a [[StringData]] internal slot\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an Object, but not a TypedArray or an ArrayBuffer\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an agent signifier\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an instance of a concrete subclass of Module Record\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 0 to 23\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 0 to 59\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 0 to 999\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 1 to 12\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 1 to 31\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integer in the inclusive interval from 2 to 36\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *11*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *23*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *365*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *59*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *6*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *+0*<sub>𝔽</sub> to *999*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the inclusive interval from *1*<sub>𝔽</sub> to *31*<sub>𝔽</sub>\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"an integral Number in the interval from *+0*<sub>𝔽</sub> (inclusive) to msPerDay (exclusive)\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"any value except a Completion Record\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"anything\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a non-negative integer or a non-empty List of *SyntaxError* objects\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing a List of Records with fields [[Key]] (an ECMAScript language value) and [[Elements]] (a List of ECMAScript language values), or a throw completion\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing a Record with fields [[Index]] (an integral Number) and [[Value]] (an ECMAScript language value) or a throw completion\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing a Record with fields [[Key]] (a property key) and [[Closure]] (an ECMAScript function object) or an abrupt completion\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing either an Object, *\\\"not-equal\\\"*, *\\\"timed-out\\\"*, or *\\\"ok\\\"*, or a throw completion\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"either a normal completion containing one of ~suspended-start~, ~suspended-yield~, or ~completed~, or a throw completion\"]).toString.trim().nonEmpty" : true,
  "lang.Type(ty : ty.Ty = Unknown[\"source text\"]).toString.trim().nonEmpty" : true
}
